# This workflow install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CACHE_NUMBER: 0  # increase to reset cache manually

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Conda
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        miniforge-variant: Mambaforge
        miniforge-version: latest
        activate-environment: colibri-dev
        use-mamba: true    
    
    - name: Cache Conda packages
      uses: actions/cache@v3
      with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('environment.yml') }}
    
    - name: Update environment (full includes colibri and models)
      run: mamba env update -n colibri-dev -f full_environment.yml
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  
    - name: Install pytest
      shell: bash -l {0}
      run: |
        pip install pytest

    - name: Run ATS
      uses: codecov/codecov-action@v4.0.1
      env:
        CODECOV_STATIC_TOKEN: ${{ secrets.CODECOV_STATIC_TOKEN }}
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Run tests and collect coverage
      run: pytest --cov app ${{ env.CODECOV_ATS_TESTS }}
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        flags: smart-tests
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}